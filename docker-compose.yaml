services:
  medusa-be:
    restart: unless-stopped
    container_name: wr_medusa_be
    build:
      context: .
      dockerfile: docker/development/medusa-be/Dockerfile
    volumes:
      - .:/app
    environment:
      DATABASE_TYPE: postgres
#      NODE_ENV: production
#      BACKEND_URL: ${MEDUSA_INSTANCE_URL}
#      STORE_CORS: ${NEXT_STORE_URL},${ANALOG_STORE_URL},http://localhost:5173
      DATABASE_URL: postgresql://root:root@medusa-db:5432/medusa?ssl_mode=disable
      MINIO_FILE_URL: "http://localhost:9004/medusa-bucket"
      MINIO_REGION: "us-east-1"
      MINIO_ENDPOINT: "http://medusa-minio:9004/"
      MINIO_BUCKET: medusa-bucket
      MINIO_ACCESS_KEY: minioadminkey
      MINIO_SECRET_KEY: minioadminkey
      REDIS_URL: valkey://medusa-valkey:6379
      CACHE_REDIS_URL: valkey://medusa-valkey:6379
      EVENTS_REDIS_URL: valkey://medusa-valkey:6379
      MEILISEARCH_HOST: http://medusa-meilisearch:7700
      MEILISEARCH_API_KEY: MEILI_MASTER_KEY_FOR_DEVELOPMENT_ONLY
    command: >
      pnpm --filter medusa-be dev
    #      tail -f
#      pnpm run -r build && pnpm deploy --filter=medusa-be --dev /deploy/dev/medusa-be && pnpm start /deploy/dev/medusa-be
    ports:
      - "9000:9000"
    depends_on:
      - medusa-db
      - medusa-valkey
      - medusa-minio
      - medusa-meilisearch
    networks:
      - internal
  medusa-valkey:
    image: valkey/valkey:8-alpine
    ports:
      - "6379:6379"
    volumes:
      - medusa-valkey-data:/data
    networks:
      - internal
  medusa-minio:
    image: minio/minio
    container_name: wr_medusa_minio
    ports:
      - "9003:9003"
      - "9004:9004"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - medusa-minio-data:/data
    networks:
      - internal
    command: server /data --console-address ":9003" --address :9004
  medusa-meilisearch:
    image: getmeili/meilisearch:v1.12
    container_name: wr_medusa_meilisearch
    ports:
      - "7700:7700"
    volumes:
      - medusa-meilisearch-data:/meili_data
    environment:
      MEILI_MASTER_KEY: MEILI_MASTER_KEY_FOR_DEVELOPMENT_ONLY
      MEILI_NO_ANALYTICS: true
    networks:
      - internal
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:7700' ]
      interval: 10s
      timeout: 5s
      retries: 5
  medusa-db:
    image: postgres:17.2-alpine
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${DC_POSTGRES_PASSWORD:-root}
      POSTGRES_USER: ${DC_POSTGRES_USER:-root}
      POSTGRES_DB: ${DC_POSTGRES_DB:-medusa}
      PGDATA: '/var/lib/postgresql/data'
    command: [ 'postgres', '-cshared_preload_libraries=pg_stat_statements' ]
    ports:
      - "5432:5432"
    volumes:
      - ${DC_POSTGRES_VOLUME_DATA:-./.docker_data/db}:/var/lib/postgresql/data
    networks:
      - internal
  adminer:
    image: adminer
    restart: unless-stopped
    environment:
      ADMINER_DESIGN: nette
      ADMINER_DEFAULT_SERVER: ${DC_ADMINER_DB:-db}
      ADMINER_PLUGINS: 'dump-json'
    ports:
      - "8081:8080"
    depends_on:
      - medusa-db
    networks:
      - internal
networks:
  internal:
    driver: bridge

volumes:
  medusa-valkey-data:
  medusa-minio-data:
  medusa-meilisearch-data:
